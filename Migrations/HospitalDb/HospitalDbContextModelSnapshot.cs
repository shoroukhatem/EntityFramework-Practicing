// <auto-generated />
using EF_CORE_Project.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_CORE_Project.Migrations.HospitalDb
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EF_CORE_Project.Hospital.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Consultants");
                });

            modelBuilder.Entity("EF_CORE_Project.Hospital.Drug", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"), 1L, 1);

                    b.Property<double>("Dosage")
                        .HasColumnType("float");

                    b.HasKey("Code");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("EF_CORE_Project.Hospital.Drug_Brand", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Code", "Brand");

                    b.ToTable("Drug_Brand");
                });

            modelBuilder.Entity("EF_CORE_Project.Hospital.Nurse", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Number"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ward_Id")
                        .HasColumnType("int");

                    b.HasKey("Number");

                    b.HasIndex("Ward_Id");

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("EF_CORE_Project.Hospital.Nurse_Drug_Patient", b =>
                {
                    b.Property<int>("Pat_Id")
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Drug_Code")
                        .HasColumnType("int");

                    b.Property<int>("Nur_Num")
                        .HasColumnType("int");

                    b.HasKey("Pat_Id", "Date", "Time");

                    b.HasIndex("Drug_Code");

                    b.HasIndex("Nur_Num");

                    b.ToTable("Nurse_Drug_Patient");
                });

            modelBuilder.Entity("EF_CORE_Project.Hospital.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Con_Id")
                        .HasColumnType("int");

                    b.Property<string>("DOB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ward_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Con_Id");

                    b.HasIndex("Ward_Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("EF_CORE_Project.Hospital.Patient_Con", b =>
                {
                    b.Property<int>("Con_Id")
                        .HasColumnType("int");

                    b.Property<int>("Pat_Id")
                        .HasColumnType("int");

                    b.HasKey("Con_Id", "Pat_Id");

                    b.HasIndex("Pat_Id");

                    b.ToTable("patient_Con");
                });

            modelBuilder.Entity("EF_CORE_Project.Hospital.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nurse_Num")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Nurse_Num")
                        .IsUnique();

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("EF_CORE_Project.Hospital.Drug_Brand", b =>
                {
                    b.HasOne("EF_CORE_Project.Hospital.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("EF_CORE_Project.Hospital.Nurse", b =>
                {
                    b.HasOne("EF_CORE_Project.Hospital.Ward", "Ward")
                        .WithMany("Nurses")
                        .HasForeignKey("Ward_Id");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("EF_CORE_Project.Hospital.Nurse_Drug_Patient", b =>
                {
                    b.HasOne("EF_CORE_Project.Hospital.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("Drug_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_CORE_Project.Hospital.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("Nur_Num")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_CORE_Project.Hospital.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("Pat_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("EF_CORE_Project.Hospital.Patient", b =>
                {
                    b.HasOne("EF_CORE_Project.Hospital.Consultant", null)
                        .WithMany("Patients")
                        .HasForeignKey("Con_Id");

                    b.HasOne("EF_CORE_Project.Hospital.Ward", null)
                        .WithMany("Patients")
                        .HasForeignKey("Ward_Id");
                });

            modelBuilder.Entity("EF_CORE_Project.Hospital.Patient_Con", b =>
                {
                    b.HasOne("EF_CORE_Project.Hospital.Consultant", "Consultant")
                        .WithMany()
                        .HasForeignKey("Con_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_CORE_Project.Hospital.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("Pat_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("EF_CORE_Project.Hospital.Ward", b =>
                {
                    b.HasOne("EF_CORE_Project.Hospital.Nurse", "Manager")
                        .WithOne()
                        .HasForeignKey("EF_CORE_Project.Hospital.Ward", "Nurse_Num");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("EF_CORE_Project.Hospital.Consultant", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("EF_CORE_Project.Hospital.Ward", b =>
                {
                    b.Navigation("Nurses");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
